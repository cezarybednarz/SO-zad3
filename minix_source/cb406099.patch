diff -rupN /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/include/minix/callnr.h /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/include/minix/callnr.h
--- /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/include/minix/callnr.h	2014-09-14 11:00:44.000000000 +0200
+++ /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/include/minix/callnr.h	2020-05-08 12:43:59.591007189 +0200
@@ -58,8 +58,10 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_CHANGE_PARENT	(PM_BASE + 48)
+#define PM_GETOPPID 	(PM_BASE + 49)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		50	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupN /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/include/unistd.h /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/include/unistd.h
--- /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/include/unistd.h	2014-09-14 11:00:43.000000000 +0200
+++ /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/include/unistd.h	2020-05-08 16:52:55.461003776 +0200
@@ -144,6 +144,10 @@ __aconst char *ttyname(int);
 int	 unlink(const char *);
 ssize_t	 write(int, const void *, size_t);
 
+/* parent */
+int changeparent(void);
+pid_t getoppid(pid_t pid);
+
 
 /*
  * IEEE Std 1003.2-92, adopted in X/Open Portability Guide Issue 4 and later
diff -rupN /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/include/unistd.h /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/include/unistd.h
--- /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/include/unistd.h	2014-09-13 23:56:50.000000000 +0200
+++ /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/include/unistd.h	2020-05-08 16:52:51.897040947 +0200
@@ -144,6 +144,10 @@ __aconst char *ttyname(int);
 int	 unlink(const char *);
 ssize_t	 write(int, const void *, size_t);
 
+/* parent */
+int changeparent(void);
+pid_t getoppid(pid_t pid);
+
 
 /*
  * IEEE Std 1003.2-92, adopted in X/Open Portability Guide Issue 4 and later
diff -rupN /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/lib/libc/misc/changeparent.c /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/lib/libc/misc/changeparent.c
--- /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/lib/libc/misc/changeparent.c	1970-01-01 01:00:00.000000000 +0100
+++ /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/lib/libc/misc/changeparent.c	2020-05-08 17:54:52.485535240 +0200
@@ -0,0 +1,12 @@
+#include <lib.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <minix/rs.h>
+
+int changeparent(void)
+{
+	message m;
+	return _syscall(PM_PROC_NR, PM_CHANGE_PARENT, &m);
+}
diff -rupN /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/lib/libc/misc/getoppid.c /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/lib/libc/misc/getoppid.c
--- /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/lib/libc/misc/getoppid.c	1970-01-01 01:00:00.000000000 +0100
+++ /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/lib/libc/misc/getoppid.c	2020-05-08 17:54:08.489990906 +0200
@@ -0,0 +1,18 @@
+#include <lib.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <minix/rs.h>
+
+pid_t getoppid(pid_t pid)
+{
+	message m;
+	m.m1_i1 = pid;
+	int ret = _syscall(PM_PROC_NR, PM_GETOPPID, &m);
+
+	if(ret < 0)
+		return(ret);
+
+	return(m.m1_i1);
+}
diff -rupN /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/lib/libc/misc/Makefile.inc /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/lib/libc/misc/Makefile.inc
--- /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/lib/libc/misc/Makefile.inc	2014-09-13 23:56:50.000000000 +0200
+++ /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/lib/libc/misc/Makefile.inc	2020-05-08 12:50:10.291057579 +0200
@@ -7,4 +7,4 @@
 SRCS+=	initfini.c
 
 # for -fstack-protector
-SRCS+=	stack_protector.c
+SRCS+=	stack_protector.c changeparent.c getoppid.c
diff -rupN /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/minix/include/minix/callnr.h /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/minix/include/minix/callnr.h
--- /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/minix/include/minix/callnr.h	2014-09-13 23:56:50.000000000 +0200
+++ /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/minix/include/minix/callnr.h	2020-05-08 12:43:44.771163884 +0200
@@ -58,8 +58,10 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_CHANGE_PARENT	(PM_BASE + 48)
+#define PM_GETOPPID 	(PM_BASE + 49)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		50	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupN /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/minix/servers/pm/forkexit.c /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/minix/servers/pm/forkexit.c
--- /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/minix/servers/pm/forkexit.c	2014-09-13 23:56:50.000000000 +0200
+++ /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/minix/servers/pm/forkexit.c	2020-05-08 15:10:57.013643334 +0200
@@ -85,6 +85,7 @@ int do_fork()
   procs_in_use++;
   *rmc = *rmp;			/* copy parent's process slot to child's */
   rmc->mp_parent = who_p;			/* record child's parent */
+  rmc->mp_first_parent = mproc[rmc->mp_parent].mp_pid;
   if (!(rmc->mp_trace_flags & TO_TRACEFORK)) {
 	rmc->mp_tracer = NO_TRACER;		/* no tracer attached */
 	rmc->mp_trace_flags = 0;
@@ -182,6 +183,7 @@ int do_srv_fork()
   procs_in_use++;
   *rmc = *rmp;			/* copy parent's process slot to child's */
   rmc->mp_parent = who_p;			/* record child's parent */
+  rmc->mp_first_parent = mproc[rmc->mp_parent].mp_pid;
   if (!(rmc->mp_trace_flags & TO_TRACEFORK)) {
 	rmc->mp_tracer = NO_TRACER;		/* no tracer attached */
 	rmc->mp_trace_flags = 0;
diff -rupN /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/minix/servers/pm/main.c /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/minix/servers/pm/main.c
--- /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/minix/servers/pm/main.c	2014-09-13 23:56:50.000000000 +0200
+++ /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/minix/servers/pm/main.c	2020-05-08 17:57:06.536146053 +0200
@@ -190,6 +190,7 @@ static int sef_cb_init_fresh(int UNUSED(
   			 * that mp_parent always points to a valid slot number.
   			 */
   			rmp->mp_parent = INIT_PROC_NR;
+  			rmp->mp_first_parent = INIT_PID;
   			rmp->mp_procgrp = rmp->mp_pid = INIT_PID;
 			rmp->mp_flags |= IN_USE; 
 
@@ -200,9 +201,11 @@ static int sef_cb_init_fresh(int UNUSED(
 		else {					/* system process */
   			if(ip->proc_nr == RS_PROC_NR) {
   				rmp->mp_parent = INIT_PROC_NR;
+  				rmp->mp_first_parent = INIT_PID;
   			}
   			else {
   				rmp->mp_parent = RS_PROC_NR;
+  				rmp->mp_first_parent = RS_NOT_INIT_PID;
   			}
   			rmp->mp_pid = get_free_pid();
 			rmp->mp_flags |= IN_USE | PRIV_PROC;
diff -rupN /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/minix/servers/pm/Makefile /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/minix/servers/pm/Makefile
--- /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/minix/servers/pm/Makefile	2014-09-13 23:56:50.000000000 +0200
+++ /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/minix/servers/pm/Makefile	2020-05-08 14:15:46.696745173 +0200
@@ -4,7 +4,7 @@
 PROG=	pm
 SRCS=	main.c forkexit.c exec.c time.c alarm.c \
 	signal.c utility.c table.c trace.c getset.c misc.c \
-	profile.c mcontext.c schedule.c
+	profile.c mcontext.c schedule.c parentlib.c
 
 DPADD+=	${LIBSYS} ${LIBTIMERS}
 LDADD+=	-lsys -ltimers
@@ -14,4 +14,4 @@ CPPFLAGS.misc.c+=	-I${NETBSDSRCDIR}/mini
 CPPFLAGS.schedule.c+=	-I${NETBSDSRCDIR}/minix
 CPPFLAGS.utility.c+=	-I${NETBSDSRCDIR}/minix
 
-.include <minix.service.mk>
+.include <minix.service.mk>
\ Brak znaku nowej linii na ko≈Ñcu pliku
diff -rupN /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/minix/servers/pm/mproc.h /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/minix/servers/pm/mproc.h
--- /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/minix/servers/pm/mproc.h	2014-09-13 23:56:50.000000000 +0200
+++ /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/minix/servers/pm/mproc.h	2020-05-08 16:21:11.124871466 +0200
@@ -70,6 +70,8 @@ EXTERN struct mproc {
   char mp_name[PROC_NAME_LEN];	/* process name */
 
   int mp_magic;			/* sanity check, MP_MAGIC */
+
+  pid_t mp_first_parent;   /* index of first parent process */
 } mproc[NR_PROCS];
 
 /* Flag values */
@@ -92,4 +94,6 @@ EXTERN struct mproc {
 #define DELAY_CALL	0x20000	/* waiting for call before sending signal */
 #define TAINTED		0x40000 /* process is 'tainted' */
 
+#define RS_NOT_INIT_PID -1 /* when rs process not yet initialized */
+
 #define MP_MAGIC	0xC0FFEE0
diff -rupN /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/minix/servers/pm/parentlib.c /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/minix/servers/pm/parentlib.c
--- /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/minix/servers/pm/parentlib.c	1970-01-01 01:00:00.000000000 +0100
+++ /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/minix/servers/pm/parentlib.c	2020-05-08 18:45:48.737771690 +0200
@@ -0,0 +1,36 @@
+#include "pm.h"
+#include "proto.h"
+#include "mproc.h"
+
+int do_changeparent(void) {
+	if(mp->mp_parent == INIT_PROC_NR) {
+		return(EACCES);
+	}
+
+	if(mproc[mp->mp_parent].mp_flags & WAITING) {
+		return(EPERM);
+	}
+
+	mp->mp_parent = mproc[mp->mp_parent].mp_parent;
+
+	return OK;
+}
+
+
+int do_getoppid(void) {
+	pid_t pid = m_in.m1_i1;
+	register struct mproc *rp = find_proc(pid);
+
+	if(!rp) {
+		return(EINVAL);
+	}
+
+	if(rp->mp_first_parent == RS_NOT_INIT_PID) { /* rs is parent, but not yet initialized */
+		mp->mp_reply.m1_i1 = mproc[RS_PROC_NR].mp_pid;
+	}
+	else {
+		mp->mp_reply.m1_i1 = rp->mp_first_parent;
+	}
+
+	return(OK);
+}
diff -rupN /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/minix/servers/pm/proto.h /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/minix/servers/pm/proto.h
--- /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/minix/servers/pm/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/minix/servers/pm/proto.h	2020-05-08 13:26:20.775791162 +0200
@@ -89,3 +89,7 @@ struct mproc *find_proc(pid_t lpid);
 int nice_to_priority(int nice, unsigned *new_q);
 int pm_isokendpt(int ep, int *proc);
 void tell_vfs(struct mproc *rmp, message *m_ptr);
+
+/* parent.c */
+int do_changeparent(void);
+int do_getoppid(void);
diff -rupN /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/minix/servers/pm/table.c /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/minix/servers/pm/table.c
--- /home/cezary/Dokumenty/SO/SO-zad3/minix_source_copy/minix_source/usr/src/minix/servers/pm/table.c	2014-09-13 23:56:50.000000000 +0200
+++ /home/cezary/Dokumenty/SO/SO-zad3/minix_source/usr/src/minix/servers/pm/table.c	2020-05-08 13:08:52.783043279 +0200
@@ -58,5 +58,7 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,		/* getsysinfo(2) */
+	CALL(PM_CHANGE_PARENT)	= do_changeparent,		/* getparent(2) */
+	CALL(PM_GETOPPID)	= do_getoppid	/* getoppid(2) */
 };
